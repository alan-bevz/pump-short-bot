import { parentPort, workerData } from 'worker_threads';
import strategy from './strategies/index.js';

// –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ –¥–∞–Ω—ñ –∑ –≤–æ—Ä–∫–µ—Ä—É
const { 
  configs: CONFIGS, 
  candles: CANDLES, 
  workerId: WORKER_ID,
  strategyKey: STRATEGY_KEY
} = workerData;
const BATCH_SIZE = parseInt(process.env.BATCH_SIZE || 100);

// –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
const ALL_RESULTS = [];

/**
 * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ü—ñ–Ω–∫–∏ —è–∫–æ—Å—Ç—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó:
 * - netProfit: –æ—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫
 * - avgProfitPerTrade: –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –æ–¥–Ω—ñ—î—ó —É–≥–æ–¥–∏
 * - winRate: —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
 * - totalTrades: —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞–¥—Ç–æ —á–∞—Å—Ç—ñ —É–≥–æ–¥–∏
 */
function evaluateResult(result) {
  const netProfit = parseFloat(result.result.netWithCommission);
  const winRate = parseFloat(result.result.winRate);
  const profitFactor = parseFloat(result.result.profitFactor);
  const totalTrades = parseInt(result.result.countPosition.qty);

  // if (profitFactor < 1.5) return -Infinity;
  if (isNaN(winRate)) return -Infinity;
  if (1 >= netProfit) return -Infinity;

  const avgProfitPerTrade = netProfit / totalTrades;

  const score =
    avgProfitPerTrade * 10 +
    winRate * 0.5 +
    netProfit -
    totalTrades / 250;

  return score.toFixed(8);
}


/**
 * –û–±—Ä–æ–±–∫–∞ –æ–¥–Ω—ñ—î—ó –ø–∞—á–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—ñ–≤
 */
async function processBatch(batch, startIndex) {
  const results = await Promise.all(batch.map(config => strategy[STRATEGY_KEY].backtest(config, CANDLES)));

  let bestInBatch = null;

  for (const result of results) {
    if (!result) continue;

    const score = evaluateResult(result);

    // –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—ñ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –≤ —Ü—ñ–π –ø–∞—á—Ü—ñ
    if (score !== -Infinity && (!bestInBatch || score > bestInBatch.score)) {
      bestInBatch = { ...result, score };
    }
  }

  if (bestInBatch) {
    ALL_RESULTS.push(bestInBatch);
    console.log(`üìà –í–æ—Ä–∫–µ—Ä #${WORKER_ID}: –∫—Ä–∞—â–∏–π —É –±–∞—á—É (–≤—ñ–¥ ${startIndex} –¥–æ ${startIndex + BATCH_SIZE}): ${bestInBatch.result.netWithCommission} USDT`);
  } else {
    console.log(`üìà –í–æ—Ä–∫–µ—Ä #${WORKER_ID}: –Ω–µ–º–∞—î –∫—Ä–∞—â–æ–≥–æ —É –±–∞—á—ñ (–≤—ñ–¥ ${startIndex} –¥–æ ${startIndex + BATCH_SIZE})`);
  }
}

// –ì–æ–ª–æ–≤–Ω–∏–π –±–ª–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
(async () => {
  console.warn(`\x1b[32müìà –í–æ—Ä–∫–µ—Ä #${WORKER_ID}: –ø–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –±–∞—á–∞ ${CONFIGS.length}\x1b[0m`);

  for (let i = 0; i < CONFIGS.length; i += BATCH_SIZE) {
    const batch = CONFIGS.slice(i, i + BATCH_SIZE);
    await processBatch(batch, i);
  }

  parentPort.postMessage(ALL_RESULTS);
})();
